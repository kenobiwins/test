{
    "env": {
        "browser": true,
        "es2021": true,
        "jest": true
    },
    "extends": [
        "eslint:recommended",
        "plugin:react/recommended",
        "plugin:@typescript-eslint/recommended",
        "prettier"
    ],
    "overrides": [
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaVersion": "latest",
        "sourceType": "module"
    },
    "plugins": [
        "react",
        "react-hooks",
        "@typescript-eslint",
        "prettier",
        "import"
    ],
    "rules": {
        "comma-dangle": ["warn", "always-multiline"],
        "eol-last": "off",
        "react/react-in-jsx-scope": "off",
        "spaced-comment": "error",
        "quotes": ["error", "single"],
        "no-duplicate-imports": "error",
        "sort-imports": "off",
        "import/first": "error",
        "import/newline-after-import": "error",
        "import/no-duplicates": "error",
        "multiline-ternary": ["off"],
        "semi": [2, "never"],
        "object-curly-spacing": ["error", "always"],

        "indent": "off",
        "@typescript-eslint/indent": ["error", 2, {
            // taken from eslint-standard-config
            "SwitchCase": 1,
            "VariableDeclarator": 1,
            "outerIIFEBody": 1,
            "MemberExpression": 1,
            "FunctionDeclaration": { "parameters": 1, "body": 1 },
            "FunctionExpression": { "parameters": 1, "body": 1 },
            "CallExpression": { "arguments": 1 },
            "ArrayExpression": 1,
            "ObjectExpression": 1,
            "ImportDeclaration": 1,
            "flatTernaryExpressions": false,
            "ignoreComments": false,
            "ignoredNodes": [
                "TemplateLiteral *",
                // avoid conflict with rule react/jsx-indent-props
                "JSXAttribute",
                "JSXSpreadAttribute"
            ]
        }],

        // do not require properties to be marked as public - it's their default
        "@typescript-eslint/explicit-member-accessibility": ["error", { "accessibility": "no-public" }],

        // overwritten by "@typescript-eslint/no-unused-vars"
        "no-unused-vars": "off",

        // we use TypeScript instead of prop-types
        "react/prop-types": "off",

        // we need a way to get around TypeScipt when there's no good solution
        "@typescript-eslint/ban-ts-ignore": "off",

        // we use void to avoid unused variable errors where there's no other way
        "no-void": "off",

        "react/jsx-closing-bracket-location": ["error", {
            "nonEmpty": "line-aligned",
            "selfClosing": "line-aligned"
        }],

        // React deprecation prefix
        "camelcase": ["error", {
            "allow": ["^UNSAFE_"]
        }],

        // hooks
        "react-hooks/rules-of-hooks": "error"
    },
    "settings": {
        "import/resolver": {
            "typescript": {}
        }
    }
}
